package com.example.local_image_controller_final_project_backend.controller;

import com.example.local_image_controller_final_project_backend.config.LocalStoragePath;
import com.example.local_image_controller_final_project_backend.exceptions.ImageModelDataNotFound;
import com.example.local_image_controller_final_project_backend.model.ImageModel;
import com.example.local_image_controller_final_project_backend.repository.AlbumModelRepository;
import com.example.local_image_controller_final_project_backend.service.ImageModelService;
import com.example.local_image_controller_final_project_backend.service.ImageStorageService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

@RestController
@RequestMapping("/images")
public class ImageModelController {

    private final ImageModelService imageModelService;
    private final ImageStorageService imageStorageService;

    public ImageModelController(ImageModelService imageModelService, ImageStorageService imageStorageService, AlbumModelRepository albumModelrepository) {
        this.imageModelService = imageModelService;
        this.imageStorageService = imageStorageService;
    }

    @GetMapping
    public ResponseEntity<List<ImageModel>> getAllImagesData() {
        return new ResponseEntity<>(imageModelService.getAllImagesData(), HttpStatus.OK);
    }

    @GetMapping("/{imageId}")
    public ResponseEntity<ImageModel> getImageModelById(@PathVariable(name = "imageId") Long id) {
        ImageModel imageModel = imageModelService.getImageModelById(id);
        return new ResponseEntity<>(imageModel, HttpStatus.OK);
    }

    @GetMapping("/downloadImage/{imageModelId}")
    public ResponseEntity<Resource> downloadImageFromStorage(@PathVariable(name = "imageModelId") Long imageModelId) {

        //1. Generate resource (file) by given path generated by given id:
        String imagePath = imageModelService.getImagePathById(imageModelId);
        FileSystemResource resource = new FileSystemResource(imagePath);

        //2. Convert resource into media type defined in the HTTP specification
        MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);

        //3. Http request data structure. Allows passing additional information with an HTTP
        // request or response. HTTP headers are the name or value pairs that are displayed in the request
        // and response messages of message headers for HTTP:
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(mediaType);

        //4. attachment() - init browser download, inline() - init open in browser
        ContentDisposition disposition = ContentDisposition.attachment().filename(Objects.requireNonNull(resource.getFilename())).build();

        //5. disposition - already built file with name and data to dispose.
        // header holds all multipart body data in http context
        headers.setContentDisposition(disposition);

        return new ResponseEntity<>(resource, headers, HttpStatus.OK);
    }

    /**
     * API will request MultiPartFile 'imageFile' and String 'imageModelJSON' params with image file from client.
     * Using Jackson library, JSON String is converted into ImageModel object and
     * sent for imageModelService Service layer to save Object to DB.
     */

    @PostMapping("/uploadImage")
    public ResponseEntity<String> uploadImage(@RequestParam("imageFile") MultipartFile imageFile, @RequestParam("imageModelJSON") String imageModelJSON) {

        try {
            saveImageToStorageAndModelToDB(imageFile, imageModelJSON);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Image and thumbnail upload failed", HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>("Image posted and thumbnail generated successfully", HttpStatus.OK);
    }

    @PostMapping("/uploadImages")
    public ResponseEntity<String> uploadImages(@RequestParam("imageFiles") MultipartFile[] imageFiles, @RequestParam("imageModelJSON") String imageModelJSON) {
        try {
            saveMultipleImagesIntoStorage(imageFiles, imageModelJSON);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Images and thumbnail upload failed", HttpStatus.INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>("Images posted and thumbnail generated successfully", HttpStatus.OK);
    }

    private void saveMultipleImagesIntoStorage(MultipartFile[] imageFiles, String imageModelJSON) {
        Arrays.stream(imageFiles).forEach(multipartFile -> {
            try {
                saveImageToStorageAndModelToDB(multipartFile, imageModelJSON);

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Unable to save image model data to DB");
            }
        });
    }

    /**
     * Save single image and single thumbnail to storage
     */
    private void saveImageToStorageAndModelToDB(MultipartFile imageFile, String imageModelJSON) throws Exception {
        ImageModel imageModel = mapJsonIntoImageModel(imageModelJSON);

        imageModel.setImageFileStorageLocation(imageStorageService.saveImageToLocalStorage(imageFile, LocalStoragePath.getImagesStoragePath()));
        imageModel.setImageThumbnailFileStorageLocation(imageStorageService.createThumbnailImage(LocalStoragePath.getImagesStoragePath(), LocalStoragePath.getThumbnailStoragePath()));

        System.out.println(imageModelJSON);
        System.out.println(imageModel);

        imageModelService.saveImageDataToDB(imageModel);
    }
    /**
     * Map standard JSON into ImageModel object
     */
    private ImageModel mapJsonIntoImageModel(String imageModelJSON) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        return  objectMapper.readValue(imageModelJSON, ImageModel.class);
        }

    /**
     * Update existing image data in DB
     */
    @PutMapping("/updateImage")
    public ResponseEntity<String> updateImageData(@RequestBody ImageModel imageModel) {
        try {
            imageModelService.saveImageDataToDB(imageModel);
        } catch (ImageModelDataNotFound e) {
            e.printStackTrace();
            return new ResponseEntity<>("Image data updated successfully", HttpStatus.INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>("Image data updated successfully", HttpStatus.OK);
    }

    @DeleteMapping("/{imageId}")
    public ResponseEntity<String> deleteImage(@PathVariable(name = "imageId") Long imageId) {
        try {
            deleteImageAndThumbnailFromStorage(imageId);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>("Image removed", HttpStatus.OK);
    }

    private void deleteImageAndThumbnailFromStorage(Long imageId) throws IOException {
        ImageModel imageModel = imageModelService.getImageModelById(imageId);

        Path imagePath = Paths.get(imageModel.getImageFileStorageLocation());
        Path thumbnailPath = Paths.get(imageModel.getImageThumbnailFileStorageLocation());

        imageStorageService.deleteImageAndThumbnailFromStorage(imagePath, thumbnailPath);
        imageModelService.deleteImageFromDB(imageId);
    }
}
